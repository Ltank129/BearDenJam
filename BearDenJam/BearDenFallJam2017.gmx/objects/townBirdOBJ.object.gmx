<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>building[TOWN_SKULBASTIAN] =skulbastianHouseBirdOBJ;
building[TOWN_DUNGEON_DOOR] =townDungeonDoorBirdOBJ;
building[TOWN_HOUSE] = houseBirdOBJ;



//check for a controller
if(instance_exists(controllerBirdOBJ)){

//set the room size
room_width = CELL_WIDTH * (controllerBirdOBJ.townWidth+1);
room_height = CELL_HEIGHT * (controllerBirdOBJ.townHeight+1);



//spawn the town





//render the town ---------------------------------------------------------------

for (var yy = 0; yy &lt; controllerBirdOBJ.townHeight; yy++) {
    for (var xx = 0; xx &lt; controllerBirdOBJ.townWidth; xx++) {
        if (controllerBirdOBJ.townGrid[# xx, yy] != WALL) {
            // Draw the floor
            tile_add(floorTileBirdBKG, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0)
        }
        
    }
}

//////////////////////////////////////////////////////////////////
// PART 4 STARTS HERE!!!!
// Get tile sizes
var tw = CELL_WIDTH/2;
var th = CELL_HEIGHT/2;

// Add the tiles

for (var yy = 0; yy &lt; controllerBirdOBJ.townHeight*2; yy++) {
    for (var xx = 0; xx &lt; controllerBirdOBJ.townWidth*2; xx++) {
        if (controllerBirdOBJ.townGrid[# xx div 2, yy div 2] == FLOOR &amp;&amp; (xx &lt; 3 || xx &gt; (controllerBirdOBJ.townWidth*2)-3 || yy &lt; 3 || yy &gt; (controllerBirdOBJ.townHeight*2)-3)) {
            // Get the tile's x and y
            var tx = xx*tw;
            var ty = yy*th;
            
            var right = controllerBirdOBJ.townGrid[# (xx+1) div 2, yy div 2] != FLOOR
            var left = controllerBirdOBJ.townGrid[# (xx-1) div 2, yy div 2] != FLOOR
            var top = controllerBirdOBJ.townGrid[# xx div 2, (yy-1) div 2] != FLOOR
            var bottom = controllerBirdOBJ.townGrid[# xx div 2, (yy+1) div 2] != FLOOR
            
            var top_right = controllerBirdOBJ.townGrid[# (xx+1) div 2, (yy-1) div 2]!= FLOOR
            var top_left = controllerBirdOBJ.townGrid[# (xx-1) div 2, (yy-1) div 2] != FLOOR 
            var bottom_right = controllerBirdOBJ.townGrid[# (xx+1) div 2, (yy+1) div 2] != FLOOR 
            var bottom_left = controllerBirdOBJ.townGrid[# (xx-1) div 2, (yy+1) div 2] != FLOOR 
            
            if (right) {
                if (bottom) {
                    tile_add(wallTilesBirdBKG, tw*4, th*1, tw, th, tx+tw, ty, -ty-8);
                } else if (top) {
                    if (top_right) {
                        tile_add(wallTilesBirdBKG, tw*4, th*0, tw, th, tx+tw, ty-th, -ty-8);
                    } else {
                        tile_add(wallTilesBirdBKG, tw*3, th*0, tw, th, tx, ty-th, -ty-8);
                    }
                    tile_add(wallTilesBirdBKG, tw*0, th*1, tw, th, tx+tw, ty, -ty-8);
                } else {
                    tile_add(wallTilesBirdBKG, tw*0, th*1, tw, th, tx+tw, ty, -ty-8);
                }
            }
            
            if (left) {
                if (bottom) {
                    tile_add(wallTilesBirdBKG, tw*3, th*1, tw, th, tx-tw, ty, -ty-8);
                } else if (top) {
                    if (top_left) {
                        tile_add(wallTilesBirdBKG, tw*3, th*0, tw, th, tx-tw, ty-th, -ty-8);
                    } else {
                        tile_add(wallTilesBirdBKG, tw*4, th*0, tw, th, tx, ty-th, -ty-8);
                    }
                    tile_add(wallTilesBirdBKG, tw*2, th*1, tw, th, tx-tw, ty, -ty-8);
                } else {
                    tile_add(wallTilesBirdBKG, tw*2, th*1, tw, th, tx-tw, ty, -ty-8);
                }
            }
            
            if (top) {
                if (!top_right) {
                    tile_add(wallTilesBirdBKG, tw*2, th*2, tw, th, tx, ty-th, -ty-8);
                } else if (!top_left) {
                    tile_add(wallTilesBirdBKG, tw*0, th*2, tw, th, tx, ty-th, -ty-8);
                } else {
                    tile_add(wallTilesBirdBKG, tw*1, th*2, tw, th, tx, ty-th, -ty-8);
                }
            }
            
            if (bottom) {
                if (!bottom_right) {
                    tile_add(wallTilesBirdBKG, tw*2, th*0, tw, th, tx, ty, -ty-tw-8);
                } else if (!bottom_left) {
                    tile_add(wallTilesBirdBKG, tw*0, th*0, tw, th, tx, ty, -ty-tw-8);
                } else {
                    tile_add(wallTilesBirdBKG, tw*1, th*0, tw, th, tx, ty, -ty-tw-8);
                }
            }
        }
    }
}


//instantiate the buildings
show_debug_message("Spawning the Buildings");
for(var tx = 1; tx &lt; controllerBirdOBJ.townWidth-1; tx++){
    for(var ty =0; ty &lt; controllerBirdOBJ.townHeight-1;ty++){
    if(controllerBirdOBJ.townGrid[# tx,ty] &gt; 10000){
    show_debug_message("Spawing " + string(controllerBirdOBJ.townGrid[# tx,ty]) + " at " + string(tx) +" " + string(ty));
    instance_create(tx*CELL_WIDTH+(CELL_WIDTH/2),ty*CELL_HEIGHT+(CELL_HEIGHT/2),building[controllerBirdOBJ.townGrid[# tx,ty]]);
    if(controllerBirdOBJ.townGrid[# tx,ty] == 10012){
    instance_create(tx*CELL_WIDTH+(CELL_WIDTH/2),(ty+1)*CELL_HEIGHT+(CELL_HEIGHT/2),playerTownBirdOBJ);
    }
    }   
    }
}








}
else{
show_error("No Controller was found",true);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
