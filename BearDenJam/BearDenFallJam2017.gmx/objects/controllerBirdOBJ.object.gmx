<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_number(controllerBirdOBJ) &gt; 1){
//there is already a controller
instance_destroy();
}

level = 1;

//Create the inventory
// width 0 = Item Type; 1 = Item Name; 2 = Item Count; 3 = Healing Factor; 4 = Health Bonus; 5 = Damage Bonus;
inventory = ds_list_create();  //Create the Inventory List
inventoryMax = 10;
//Inventory stored through floating invisible persistent objets
myHP = 100;

inventoryOpen = false;
inventoryForced = false;



///Set up the town grid-----------------------------------------------------------------
townWidth = 14;
townHeight = 14;
townGrid = ds_grid_create(townWidth,townHeight);



//Create a border for the town grid, and fill the inside with floor
ds_grid_clear(townGrid,WALL)
ds_grid_set_region(townGrid,1,1,townWidth-1,townHeight-1,FLOOR);

randomize();

show_debug_message("Spawning Door");
//select one place to be the dungeon entrance
var door_x = irandom(townWidth-2)+1;
townGrid[# door_x,0] = TOWN_DUNGEON_DOOR;

//select one place to put the skulbastian's house
var dify = clamp(irandom(4)+1,2,townHeight-2);
var difx = clamp(irandom(6)-3,2,townWidth-2);
townGrid[# door_x+difx, dify] = TOWN_SKULBASTIAN;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_pressed(ord("I"))){
inventoryOpen = !inventoryOpen;
}





if(mouse_check_button_pressed(mb_left) &amp;&amp; inventoryOpen){
    //are we over a button?
    for(var i = 0; i &lt; ds_list_size(inventory);i++){
        if(point_in_rectangle(window_mouse_get_x(),window_mouse_get_y(),1240,112+64*i,1300,144+64*i)){
            if(inventory[| i].isUsable){
                //It is usable and being clicked
                //Use It!
                with(inventory[| i]){
                event_user(1);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(inventory);
ds_grid_destroy(townGrid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white)
draw_set_valign(fa_top);
draw_set_halign(fa_left);
draw_set_font(fntButtons);
draw_text(64,64,"Health:"+string(myHP));




///draw_the_inventory
if(inventoryOpen || inventoryForced){
draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_set_color(c_black);
draw_rectangle(880,60,1388,788,false);
draw_set_color(c_white);
draw_rectangle(880,60,1388,788,true);
draw_text(1134,68,"INVENTORY");
for(var i = 0; i&lt;ds_list_size(inventory);i++){
    //draw the inventory label
    draw_set_halign(fa_left);
    draw_set_color(c_gray);
     draw_rectangle(888,112+64*i,1220,144+64*i,false);
     draw_set_color(c_white);
     draw_rectangle(888,112+64*i,1220,144+64*i,true);
     draw_set_valign(fa_center);
     if(inventory[| i] != noone){
     draw_text(896,128+64*i,inventory[| i].myName + " x" + string(inventory[| i].count));
     
     //if usable, draw the use button
     if(inventory[|i].isUsable){
     drawButtonBirdSCR(1240,112+64*i,1300,144+64*i,"USE");
     }
     }
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
